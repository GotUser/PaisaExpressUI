import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import Overlay from '../core/Overlay';
import Typeahead from '../core/Typeahead';
import ClearButton from './ClearButton.react';
import Loader from './Loader.react';
import TypeaheadInputMulti from './TypeaheadInputMulti.react';
import TypeaheadInputSingle from './TypeaheadInputSingle.react';
import TypeaheadMenu from './TypeaheadMenu.react';
import { isFunction, preventInputBlur } from '../utils';
import { checkPropType, inputPropsType } from '../propTypes';
var propTypes = {
  /**
   * Specifies the size of the input.
   */
  bsSize: PropTypes.oneOf(['large', 'lg', 'small', 'sm']),

  /**
   * Displays a button to clear the input when there are selections.
   */
  clearButton: PropTypes.bool,

  /**
   * Props to be applied directly to the input. `onBlur`, `onChange`,
   * `onFocus`, and `onKeyDown` are ignored.
   */
  inputProps: checkPropType(PropTypes.object, inputPropsType),

  /**
   * Bootstrap 4 only. Adds the `is-invalid` classname to the `form-control`.
   */
  isInvalid: PropTypes.bool,

  /**
   * Indicate whether an asynchronous data fetch is happening.
   */
  isLoading: PropTypes.bool,

  /**
   * Bootstrap 4 only. Adds the `is-valid` classname to the `form-control`.
   */
  isValid: PropTypes.bool,

  /**
   * Callback for custom input rendering.
   */
  renderInput: PropTypes.func,

  /**
   * Callback for custom menu rendering.
   */
  renderMenu: PropTypes.func
};
var defaultProps = {
  clearButton: false,
  inputProps: {},
  isInvalid: false,
  isLoading: false,
  isValid: false,
  renderMenu: function renderMenu(results, menuProps, state) {
    return (// TODO: Merged props not registering correctly.
      // $FlowFixMe
      React.createElement(TypeaheadMenu, _extends({}, menuProps, {
        labelKey: state.labelKey,
        options: results,
        text: state.text
      }))
    );
  }
};

var TypeaheadComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TypeaheadComponent, _React$Component);

  function TypeaheadComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "_instance", null);

    _defineProperty(_assertThisInitialized(_this), "getInstance", function () {
      return _this._instance;
    });

    _defineProperty(_assertThisInitialized(_this), "_renderInput", function (inputProps, state) {
      var _this$props = _this.props,
          bsSize = _this$props.bsSize,
          isInvalid = _this$props.isInvalid,
          isValid = _this$props.isValid,
          multiple = _this$props.multiple,
          renderInput = _this$props.renderInput,
          renderToken = _this$props.renderToken;

      if (isFunction(renderInput)) {
        return renderInput(inputProps, state);
      }

      var props = _extends({}, inputProps, {
        bsSize: bsSize,
        isInvalid: isInvalid,
        isValid: isValid
      });

      return multiple ? React.createElement(TypeaheadInputMulti, _extends({}, props, {
        labelKey: state.labelKey,
        renderToken: renderToken,
        selected: state.selected
      })) : React.createElement(TypeaheadInputSingle, props);
    });

    _defineProperty(_assertThisInitialized(_this), "_renderMenu", function (results, menuProps, state) {
      var _this$props2 = _this.props,
          emptyLabel = _this$props2.emptyLabel,
          id = _this$props2.id,
          maxHeight = _this$props2.maxHeight,
          newSelectionPrefix = _this$props2.newSelectionPrefix,
          paginationText = _this$props2.paginationText,
          renderMenu = _this$props2.renderMenu,
          renderMenuItemChildren = _this$props2.renderMenuItemChildren;
      return renderMenu(results, _extends({}, menuProps, {
        emptyLabel: emptyLabel,
        id: id,
        maxHeight: maxHeight,
        newSelectionPrefix: newSelectionPrefix,
        paginationText: paginationText,
        renderMenuItemChildren: renderMenuItemChildren
      }), state);
    });

    _defineProperty(_assertThisInitialized(_this), "_renderAux", function (state) {
      var _this$props3 = _this.props,
          bsSize = _this$props3.bsSize,
          clearButton = _this$props3.clearButton,
          disabled = _this$props3.disabled,
          isLoading = _this$props3.isLoading;
      var onClear = state.onClear,
          selected = state.selected;
      var content;

      if (isLoading) {
        content = React.createElement(Loader, {
          bsSize: bsSize
        });
      } else if (clearButton && !disabled && selected.length) {
        content = React.createElement(ClearButton, {
          bsSize: bsSize,
          onClick: onClear,
          onFocus: function onFocus(e) {
            // Prevent the main input from auto-focusing again.
            e.stopPropagation();
          },
          onMouseDown: preventInputBlur
        });
      }

      return content ? React.createElement("div", {
        className: cx('rbt-aux', {
          'rbt-aux-lg': bsSize === 'large' || bsSize === 'lg'
        })
      }, content) : null;
    });

    return _this;
  }

  var _proto = TypeaheadComponent.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props4 = this.props,
        children = _this$props4.children,
        className = _this$props4.className,
        style = _this$props4.style;
    return React.createElement(Typeahead, _extends({}, this.props, {
      ref: function ref(instance) {
        return _this2._instance = instance;
      }
    }), function (_ref) {
      var getInputProps = _ref.getInputProps,
          getOverlayProps = _ref.getOverlayProps,
          state = _ref.state;

      var auxContent = _this2._renderAux(state);

      return React.createElement("div", {
        className: cx('rbt', {
          'has-aux': !!auxContent
        }, className),
        style: _extends({
          outline: 'none',
          position: 'relative'
        }, style),
        tabIndex: -1
      }, _this2._renderInput(getInputProps(_this2.props.inputProps), state), React.createElement(Overlay, getOverlayProps(_this2.props), function (menuProps) {
        return _this2._renderMenu(state.results, menuProps, state);
      }), auxContent, isFunction(children) ? children(state) : children);
    });
  };

  return TypeaheadComponent;
}(React.Component);

_defineProperty(TypeaheadComponent, "propTypes", propTypes);

_defineProperty(TypeaheadComponent, "defaultProps", defaultProps);

export default TypeaheadComponent;