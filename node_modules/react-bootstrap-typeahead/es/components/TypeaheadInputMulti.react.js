import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import Input from './Input.react';
import Token from './Token.react';
import { getOptionLabel, isSelectable } from '../utils';
import hintContainer from '../containers/hintContainer';
import withClassNames from '../containers/withClassNames';
import { BACKSPACE } from '../constants';
var HintedInput = hintContainer(Input);
var propTypes = {
  /**
   * Provides a hook for customized rendering of tokens when multiple
   * selections are enabled.
   */
  renderToken: PropTypes.func
};
var defaultProps = {
  renderToken: function renderToken(option, props, idx) {
    return React.createElement(Token, {
      disabled: props.disabled,
      key: idx,
      onRemove: props.onRemove,
      tabIndex: props.tabIndex
    }, getOptionLabel(option, props.labelKey));
  }
};

var TypeaheadInputMulti =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TypeaheadInputMulti, _React$Component);

  function TypeaheadInputMulti() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "_input", null);

    _defineProperty(_assertThisInitialized(_this), "_wrapper", null);

    _defineProperty(_assertThisInitialized(_this), "_renderToken", function (option, idx) {
      var _this$props = _this.props,
          _onRemove = _this$props.onRemove,
          renderToken = _this$props.renderToken;

      var props = _extends({}, _this.props, {
        onRemove: function onRemove() {
          return _onRemove(option);
        }
      });

      return renderToken(option, props, idx);
    });

    _defineProperty(_assertThisInitialized(_this), "_handleContainerClickOrFocus", function (e) {
      // Don't focus the input if it's disabled.
      if (_this.props.disabled) {
        e.currentTarget.blur();
        return;
      } // Move cursor to the end if the user clicks outside the actual input.


      var inputNode = _this._input;

      if (e.currentTarget !== inputNode && isSelectable(inputNode)) {
        inputNode.selectionStart = inputNode.value.length;
      }

      inputNode.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "_handleKeyDown", function (e) {
      var _this$props2 = _this.props,
          onKeyDown = _this$props2.onKeyDown,
          selected = _this$props2.selected,
          value = _this$props2.value;

      switch (e.keyCode) {
        case BACKSPACE:
          if (e.currentTarget === _this._input && selected.length && !value) {
            // If the input is selected and there is no text, focus the last
            // token when the user hits backspace.
            var children = _this._wrapper.children;
            var lastToken = children[children.length - 2];
            lastToken && lastToken.focus();
          }

          break;

        default:
          break;
      }

      onKeyDown(e);
    });

    return _this;
  }

  var _proto = TypeaheadInputMulti.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        className = _this$props3.className,
        inputClassName = _this$props3.inputClassName,
        labelKey = _this$props3.labelKey,
        onRemove = _this$props3.onRemove,
        placeholder = _this$props3.placeholder,
        renderToken = _this$props3.renderToken,
        selected = _this$props3.selected,
        props = _objectWithoutPropertiesLoose(_this$props3, ["className", "inputClassName", "labelKey", "onRemove", "placeholder", "renderToken", "selected"]);

    return (
      /* eslint-disable jsx-a11y/no-static-element-interactions */

      /* eslint-disable jsx-a11y/click-events-have-key-events */
      React.createElement("div", {
        className: cx('rbt-input-multi', className),
        disabled: props.disabled,
        onClick: this._handleContainerClickOrFocus,
        onFocus: this._handleContainerClickOrFocus,
        tabIndex: -1
      }, React.createElement("div", {
        className: "rbt-input-wrapper",
        ref: function ref(el) {
          return _this2._wrapper = el;
        }
      }, selected.map(this._renderToken), React.createElement(HintedInput, _extends({}, props, {
        className: inputClassName,
        inputRef: function inputRef(input) {
          _this2._input = input;

          _this2.props.inputRef(input);
        },
        onKeyDown: this._handleKeyDown,
        placeholder: selected.length ? '' : placeholder,
        style: {
          backgroundColor: 'transparent',
          border: 0,
          boxShadow: 'none',
          cursor: 'inherit',
          outline: 'none',
          padding: 0,
          width: '100%',
          zIndex: 1
        }
      }))))
      /* eslint-enable jsx-a11y/no-static-element-interactions */

      /* eslint-enable jsx-a11y/click-events-have-key-events */

    );
  };

  return TypeaheadInputMulti;
}(React.Component);

_defineProperty(TypeaheadInputMulti, "propTypes", propTypes);

_defineProperty(TypeaheadInputMulti, "defaultProps", defaultProps);

export default withClassNames(TypeaheadInputMulti);