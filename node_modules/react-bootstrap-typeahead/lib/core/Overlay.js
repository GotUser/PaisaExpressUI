"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactPopper = require("react-popper");

var _utils = require("../utils");

var propTypes = {
  /**
   * Specify menu alignment. The default value is `justify`, which makes the
   * menu as wide as the input and truncates long values. Specifying `left`
   * or `right` will align the menu to that side and the width will be
   * determined by the length of menu item values.
   */
  align: _propTypes.default.oneOf(['justify', 'left', 'right']),
  children: _propTypes.default.func.isRequired,

  /**
   * Specify whether the menu should appear above the input.
   */
  dropup: _propTypes.default.bool,

  /**
   * Whether or not to automatically adjust the position of the menu when it
   * reaches the viewport boundaries.
   */
  flip: _propTypes.default.bool,

  /* eslint-disable-line react/no-unused-prop-types */
  isMenuShown: _propTypes.default.bool,

  /**
   * Invoked when menu visibility changes.
   */
  onMenuToggle: _propTypes.default.func,
  positionFixed: _propTypes.default.bool,

  /* eslint-disable-next-line react/forbid-prop-types */
  referenceElement: _propTypes.default.object
};
var defaultProps = {
  align: 'justify',
  dropup: false,
  flip: false,
  isMenuShown: false,
  onMenuToggle: _utils.noop,
  positionFixed: false
};

function getModifiers(_ref) {
  var align = _ref.align,
      flip = _ref.flip;
  return {
    computeStyles: {
      enabled: true,
      fn: function fn(data) {
        // Use the following condition instead of `align === 'justify'` since
        // it allows the component to fall back to justifying the menu width
        // even when `align` is undefined.
        if (align !== 'right' && align !== 'left') {
          // Set the popper width to match the target width.

          /* eslint-disable-next-line no-param-reassign */
          data.styles.width = data.offsets.reference.width;
        }

        return data;
      }
    },
    flip: {
      enabled: flip
    },
    preventOverflow: {
      escapeWithReference: true
    }
  };
}

var Overlay =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(Overlay, _React$Component);

  function Overlay() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Overlay.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props = this.props,
        isMenuShown = _this$props.isMenuShown,
        onMenuToggle = _this$props.onMenuToggle;

    if (isMenuShown !== prevProps.isMenuShown) {
      onMenuToggle(isMenuShown);
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        align = _this$props2.align,
        children = _this$props2.children,
        dropup = _this$props2.dropup,
        isMenuShown = _this$props2.isMenuShown,
        positionFixed = _this$props2.positionFixed,
        referenceElement = _this$props2.referenceElement;

    if (!isMenuShown) {
      return null;
    }

    var xPlacement = align === 'right' ? 'end' : 'start';
    var yPlacement = dropup ? 'top' : 'bottom';
    return _react.default.createElement(_reactPopper.Popper, {
      modifiers: getModifiers(this.props),
      placement: yPlacement + "-" + xPlacement,
      positionFixed: positionFixed,
      referenceElement: referenceElement
    }, function (_ref2) {
      var ref = _ref2.ref,
          props = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["ref"]);
      return children((0, _extends2.default)({}, props, {
        innerRef: ref,
        inputHeight: referenceElement ? referenceElement.offsetHeight : 0
      }));
    });
  };

  return Overlay;
}(_react.default.Component);

(0, _defineProperty2.default)(Overlay, "propTypes", propTypes);
(0, _defineProperty2.default)(Overlay, "defaultProps", defaultProps);
var _default = Overlay;
exports.default = _default;