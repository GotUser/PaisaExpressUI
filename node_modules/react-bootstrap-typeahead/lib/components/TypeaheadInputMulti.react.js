"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Input = _interopRequireDefault(require("./Input.react"));

var _Token = _interopRequireDefault(require("./Token.react"));

var _utils = require("../utils");

var _hintContainer = _interopRequireDefault(require("../containers/hintContainer"));

var _withClassNames = _interopRequireDefault(require("../containers/withClassNames"));

var _constants = require("../constants");

var HintedInput = (0, _hintContainer.default)(_Input.default);
var propTypes = {
  /**
   * Provides a hook for customized rendering of tokens when multiple
   * selections are enabled.
   */
  renderToken: _propTypes.default.func
};
var defaultProps = {
  renderToken: function renderToken(option, props, idx) {
    return _react.default.createElement(_Token.default, {
      disabled: props.disabled,
      key: idx,
      onRemove: props.onRemove,
      tabIndex: props.tabIndex
    }, (0, _utils.getOptionLabel)(option, props.labelKey));
  }
};

var TypeaheadInputMulti =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(TypeaheadInputMulti, _React$Component);

  function TypeaheadInputMulti() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_input", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_wrapper", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderToken", function (option, idx) {
      var _this$props = _this.props,
          _onRemove = _this$props.onRemove,
          renderToken = _this$props.renderToken;
      var props = (0, _extends2.default)({}, _this.props, {
        onRemove: function onRemove() {
          return _onRemove(option);
        }
      });
      return renderToken(option, props, idx);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleContainerClickOrFocus", function (e) {
      // Don't focus the input if it's disabled.
      if (_this.props.disabled) {
        e.currentTarget.blur();
        return;
      } // Move cursor to the end if the user clicks outside the actual input.


      var inputNode = _this._input;

      if (e.currentTarget !== inputNode && (0, _utils.isSelectable)(inputNode)) {
        inputNode.selectionStart = inputNode.value.length;
      }

      inputNode.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleKeyDown", function (e) {
      var _this$props2 = _this.props,
          onKeyDown = _this$props2.onKeyDown,
          selected = _this$props2.selected,
          value = _this$props2.value;

      switch (e.keyCode) {
        case _constants.BACKSPACE:
          if (e.currentTarget === _this._input && selected.length && !value) {
            // If the input is selected and there is no text, focus the last
            // token when the user hits backspace.
            var children = _this._wrapper.children;
            var lastToken = children[children.length - 2];
            lastToken && lastToken.focus();
          }

          break;

        default:
          break;
      }

      onKeyDown(e);
    });
    return _this;
  }

  var _proto = TypeaheadInputMulti.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        className = _this$props3.className,
        inputClassName = _this$props3.inputClassName,
        labelKey = _this$props3.labelKey,
        onRemove = _this$props3.onRemove,
        placeholder = _this$props3.placeholder,
        renderToken = _this$props3.renderToken,
        selected = _this$props3.selected,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, ["className", "inputClassName", "labelKey", "onRemove", "placeholder", "renderToken", "selected"]);
    return (
      /* eslint-disable jsx-a11y/no-static-element-interactions */

      /* eslint-disable jsx-a11y/click-events-have-key-events */
      _react.default.createElement("div", {
        className: (0, _classnames.default)('rbt-input-multi', className),
        disabled: props.disabled,
        onClick: this._handleContainerClickOrFocus,
        onFocus: this._handleContainerClickOrFocus,
        tabIndex: -1
      }, _react.default.createElement("div", {
        className: "rbt-input-wrapper",
        ref: function ref(el) {
          return _this2._wrapper = el;
        }
      }, selected.map(this._renderToken), _react.default.createElement(HintedInput, (0, _extends2.default)({}, props, {
        className: inputClassName,
        inputRef: function inputRef(input) {
          _this2._input = input;

          _this2.props.inputRef(input);
        },
        onKeyDown: this._handleKeyDown,
        placeholder: selected.length ? '' : placeholder,
        style: {
          backgroundColor: 'transparent',
          border: 0,
          boxShadow: 'none',
          cursor: 'inherit',
          outline: 'none',
          padding: 0,
          width: '100%',
          zIndex: 1
        }
      }))))
      /* eslint-enable jsx-a11y/no-static-element-interactions */

      /* eslint-enable jsx-a11y/click-events-have-key-events */

    );
  };

  return TypeaheadInputMulti;
}(_react.default.Component);

(0, _defineProperty2.default)(TypeaheadInputMulti, "propTypes", propTypes);
(0, _defineProperty2.default)(TypeaheadInputMulti, "defaultProps", defaultProps);

var _default = (0, _withClassNames.default)(TypeaheadInputMulti);

exports.default = _default;