"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @hidden
 * Dispatches a new event based on an already internally dispatched event to the consumers of our React components.
 *
 * @param eventHandler - The public event handler assigned by the consumer of the React component.
 * When undefined, the method is no-op.
 * @param dispatchedEvent - The already internally dispatched event.
 * @param target - The target component of the new event.
 * @param eventData - The additional data to be passed via the new event. When the new event has no additional data
 *  except the args of the `BaseEvent`, `undefined` should be passed.
 */
function dispatchEvent(eventHandler, dispatchedEvent, target, 
// TODO: Uncomment after switching to TS 3.
// eventData: Exclude<keyof E, keyof BaseEvent<React.Component>> extends never ?
//     undefined : Pick<E, Exclude<keyof E, keyof BaseEvent<React.Component>>>
eventData) {
    if (eventHandler) {
        var eventBaseData = {
            syntheticEvent: dispatchedEvent,
            nativeEvent: dispatchedEvent.nativeEvent,
            target: target
        };
        eventHandler.call(undefined, Object.assign(eventBaseData, eventData));
    }
}
exports.default = dispatchEvent;
//# sourceMappingURL=dispatchEvent.js.map