import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BaseEvent } from '@progress/kendo-react-common';
/**
 * The arguments for the `onChange` Switch event.
 */
export interface SwitchChangeEvent extends BaseEvent<Switch> {
    /**
     * The new value of the Switch.
     */
    value: boolean;
}
/**
 * Represents the props of the [KendoReact Switch component]({% slug overview_switch %}).
 */
export interface SwitchProps {
    /**
     * Sets the current value of the Switch ([see example]({% slug controlled_switch %})).
     */
    checked?: boolean;
    /**
     * Sets the `className` of the wrapping element of the Switch.
     */
    className?: string;
    /**
     * Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * Disables the Switch when set to `true` ([see example]({% slug disabled_switch %})).
     */
    disabled?: boolean;
    /**
     * Sets the `dir` property of the wrapping element of the Switch.
     */
    dir?: string;
    /**
     * Sets the `id` of the Switch.
     */
    id?: string;
    /**
     * Changes the **Off** label([see example]({% slug labels_switch %})).
     */
    offLabel?: string;
    /**
     * Fires each time the Switch gets blurred.
     */
    onBlur?: (event: React.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Fires each time the user selects a new value ([see example]({% slug controlled_switch %})).
     */
    onChange?: (event: SwitchChangeEvent) => void;
    /**
     * Fires each time the Switch component gets focused.
     */
    onFocus?: (event: React.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Changes the **On** label ([see example]({% slug labels_switch %})).
     */
    onLabel?: string;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex?: number;
}
/**
 * @hidden
 */
export interface SwitchState {
    checked: boolean;
    focused: boolean;
}
/**
 * Represents the [KendoReact Switch component]({% slug overview_switch%}).
 */
export default class Switch extends React.Component<SwitchProps, SwitchState> {
    /**
     * @hidden
     */
    static propTypes: {
        checked: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        defaultChecked: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<any>;
        offLabel: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onLabel: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        disabled: boolean;
        defaultChecked: boolean;
        offLabel: string;
        onBlur: () => void;
        onFocus: () => void;
        onLabel: string;
        tabIndex: number;
    };
    /**
     * @hidden
     */
    readonly state: SwitchState;
    private _element;
    private _wrapper;
    private _id;
    private valueDuringOnChange;
    private dir?;
    /**
     * @hidden
     */
    constructor(props: SwitchProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * Gets the value of the Switch.
     */
    readonly value: boolean;
    readonly element: HTMLSpanElement | null;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected limit: (offset: number, drag: HTMLSpanElement, wrapper: HTMLSpanElement) => number;
    protected toggle: (value: boolean, event: any) => void;
    private handleClick;
    private handleKeyDown;
    private handleWrapperFocus;
    private handleWrapperBlur;
}
