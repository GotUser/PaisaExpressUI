import * as React from 'react';
import * as PropTypes from 'prop-types';
import { NumberFormatOptions } from '@progress/kendo-react-intl';
import { FormComponent, FormComponentProps, FormComponentValidity, BaseEvent } from '@progress/kendo-react-common';
declare type NumericTextBoxInputType = 'tel' | 'text';
/**
 * The arguments for the `change` event of the NumericTextBox.
 */
export interface NumericTextBoxChangeEvent extends BaseEvent<NumericTextBox> {
    /**
     * The current value of the NumericTextBox.
     */
    value: number | null;
}
/**
 * Represents the props of the [KendoReact NumericTextBox component]({% slug overview_numerictextbox %}).
 */
export interface NumericTextBoxProps extends FormComponentProps {
    /**
     * Specifies the value of the NumericTextBox.
     */
    value?: number | null;
    /**
     * Specifies the initial value. Leaves the subsequent updates uncontrolled.
     */
    defaultValue?: number | null;
    /**
     * Specifies the value that is used to increment or decrement the value of the NumericTextBox ([see example]({% slug predefinedsteps_numerictextbox %})).
     */
    step?: number;
    /**
     * Specifies the number format which is used for formatting the value ([see example]({% slug formats_numerictextbox %})). If set to `null` or `undefined`, the default format will be used.
     */
    format?: string | NumberFormatOptions;
    /**
     * Specifies the width of the NumericTextBox.
     */
    width?: number | string;
    /**
     * Sets the `tabIndex` property of the NumericTextBox.
     */
    tabIndex?: number;
    /**
     * Sets the title of the `input` element of the NumericTextBox.
     */
    title?: string;
    /**
     * Specifies the input placeholder.
     */
    placeholder?: string;
    /**
     * Specifies the smallest value that can be entered.
     */
    min?: number;
    /**
     * Specifies the greatest value that can be entered.
     */
    max?: number;
    /**
     * Specifies whether the **Up** and **Down** spin buttons will be rendered ([see example]({% slug spinbuttons_numerictextbox %})).
     */
    spinners?: boolean;
    /**
     * Determines whether the NumericTextBox is disabled.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies the name of the `input` DOM element.
     */
    name?: string;
    /**
     * Renders a floating label for the NumericTextBox.
     */
    label?: string;
    /**
     * Sets the `id` of the `input` DOM element.
     */
    id?: string;
    /**
     * Sets the `type` of the `input` DOM element.
     * The available options are:
     * - (Default) `tel`&mdash;.
     * - `text`&mdash;.
     */
    inputType?: NumericTextBoxInputType;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: NumericTextBoxChangeEvent) => void;
}
/**
 * Represents the state of the NumericTextBox that is passed to the `input` element.
 */
export interface NumericTextBoxState {
    /**
     * Represents the current value of the NumericTextBox.
     */
    value: number | null;
    /**
     * Represents the text that the user is currently typing. If valid, it will be applied the next time when the NumericTextBox is rendered.
     */
    looselyFormattedText: string | null;
    /**
     * Represents the beginning of the selected portion of the input content that will be applied the next time when the NumericTextBox is rendered.
     */
    selectionStart: number;
    /**
     * Represents the ending of the selected portion of the input content that will be applied the next time when the NumericTextBox is rendered.
     */
    selectionEnd: number;
    /**
     * Specifies whether a decimal point will be selected the next time when the NumericTextBox is rendered.
     */
    decimalSelect: boolean;
}
export default class NumericTextBox extends React.Component<NumericTextBoxProps, NumericTextBoxState> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        step: PropTypes.Requireable<any>;
        format: PropTypes.Requireable<any>;
        width: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        title: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        min: PropTypes.Requireable<any>;
        max: PropTypes.Requireable<any>;
        spinners: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        name: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        validationMessage: PropTypes.Requireable<any>;
        required: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        spinners: boolean;
        disabled: boolean;
        onChange: (_: NumericTextBoxChangeEvent) => void;
        step: number;
        required: boolean;
        validityStyles: boolean;
    };
    /**
     * @hidden
     */
    readonly state: NumericTextBoxState;
    /**
     * Gets the `name` property of the NumericTextBox.
     */
    readonly name: string | undefined;
    /**
     * Gets the value of the NumericTextBox.
     */
    readonly value: number | null;
    /**
     * Represents the validity state into which the NumericTextBox is set.
     */
    readonly validity: FormComponentValidity;
    /**
     * @hidden
     */
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    protected readonly required: boolean;
    private valueDuringOnChange?;
    private _element;
    private elementWrapper;
    private intl;
    private symbols;
    private textBeforeInput;
    private _inputId;
    constructor(props: NumericTextBoxProps);
    /**
     * Gets the element of the NumericTextBox.
     *
     * @return - An `HTMLInputElement`.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *     constructor(props) {
     *         super(props);
     *     }
     *     element = null;
     *     render() {
     *         return (
     *             <div>
     *                 <NumericTextBox
     *                     ref={(numericTextBox) =>
     *                         this.element = numericTextBox ? numericTextBox.element : null}
     *                 />
     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
     *             </div>
     *         );
     *     }
     * }
     *
     * ReactDOM.render(
     *     <App />,
     *     document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    readonly element: HTMLInputElement | null;
    /**
     * @hidden
     */
    componentWillReceiveProps(nextProps: NumericTextBoxProps): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: NumericTextBoxProps, prevState: NumericTextBoxState): void;
    /**
     * @hidden
     */
    readonly valueAsLocalString: string;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private setValidity;
    private formatNumber;
    private parseNumber;
    private elementChange;
    private nonInputActions;
    private triggerChange;
    private ranged;
    private increase;
    private decrease;
    private wheel;
    private keyDown;
}
export {};
