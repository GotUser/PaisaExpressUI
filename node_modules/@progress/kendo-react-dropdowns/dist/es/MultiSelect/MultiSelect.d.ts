import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentValidity } from '@progress/kendo-react-common';
import { TagData } from './TagList';
import DropDownBase from '../common/DropDownBase';
import { MultiSelectProps } from './MultiSelectProps';
import { DropDownStateBase, InternalState, ActiveDescendant } from './../common/settings';
/**
 * @hidden
 */
export interface MultiSelectState extends DropDownStateBase {
    selectedItems?: Array<any>;
    focusedIndex?: number;
    focusedTag?: TagData;
    activedescendant?: ActiveDescendant;
    value?: Array<any>;
}
/**
 * @hidden
 */
export interface MultiSelectInternalState extends InternalState {
    data: MultiSelectState;
}
/**
 * Represents the [KendoReact MultiSelect component]({% slug overview_multiselect %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    multiselect = null;
 *    render() {
 *       return (
 *          <div>
 *              <MultiSelect
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.multiselect = component}
 *              />
 *              <button onClick={() => alert(this.multiselect.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class MultiSelect extends React.Component<MultiSelectProps, MultiSelectState> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        dataItemKey: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        tags: PropTypes.Requireable<any>;
        tagRender: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<any>;
        filter: PropTypes.Requireable<any>;
        virtual: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<any>;
        onPageChange: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        /**
         * Represents the [KendoReact MultiSelect component]({% slug overview_multiselect %}).
         *
         * @example
         * ```jsx
         * class App extends React.Component {
         *    multiselect = null;
         *    render() {
         *       return (
         *          <div>
         *              <MultiSelect
         *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
         *                  ref={component => this.multiselect = component}
         *              />
         *              <button onClick={() => alert(this.multiselect.value)}>alert value</button>
         *          </div>
         *       );
         *    }
         * }
         * ReactDOM.render(<App />, document.querySelector('my-app'));
         * ```
         */
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>; /**
         * @hidden
         */
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        required: boolean;
        popupSettings: {
            animate: boolean;
            height: string;
        };
        validityStyles: boolean;
    };
    /**
     * @hidden
     */
    readonly state: MultiSelectState;
    private _element;
    private _valueItemsDuringOnChange;
    private readonly _inputId;
    protected readonly base: DropDownBase;
    private readonly _tags;
    private _input;
    private _skipFocusEvent;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * Represents the value of the MultiSelect.
     */
    readonly value: Array<any>;
    /**
     * Gets the `name` property of the MultiSelect.
     */
    readonly name: string | undefined;
    /**
     * Represents the validity state into which the MultiSelect is set.
     */
    readonly validity: FormComponentValidity;
    /**
     * @hidden
     */
    protected readonly required: boolean;
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: MultiSelectProps, prevState: MultiSelectState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: MultiSelectInternalState) => void;
    /**
     * @hidden
     */
    onTagDelete: (itemsToRemove: any[], event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * @hidden
     */
    onNavigate(state: MultiSelectInternalState, keyCode: number): void;
    /**
     * @hidden
     */
    itemFocus: (index: number, state: MultiSelectInternalState) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private renderSearchbar;
    private searchbarRef;
    private onChangeHandler;
    private clearButtonClick;
    private onInputKeyDown;
    private onTagsNavigate;
    private triggerOnChange;
    private selectFocusedItem;
    private setItems;
    private getFocusedState;
    private renderListContainer;
    private renderList;
    private customItemSelect;
    private handleWrapperClick;
    private handleItemClick;
    private handleBlur;
    private handleFocus;
    private onPopupOpened;
    private onPopupClosed;
    private focusElement;
    private applyState;
    private setValidity;
}
