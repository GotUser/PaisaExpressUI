import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentValidity } from '@progress/kendo-react-common';
import DropDownBase from '../common/DropDownBase';
import { DropDownListProps } from './DropDownListProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface DropDownListState extends DropDownStateBase {
}
/**
 * Represents the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    dropdownlist = null;
 *    render() {
 *       return (
 *          <div>
 *              <DropDownList
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.dropdownlist = component}
 *              />
 *              <button onClick={() => alert(this.dropdownlist.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class DropDownList extends React.Component<DropDownListProps, DropDownListState> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<any>;
        filter: PropTypes.Requireable<any>;
        virtual: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<any>;
        onPageChange: PropTypes.Requireable<any>;
        opened: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        dir: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        data: PropTypes.Requireable<any>;
        textField: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        label: PropTypes.Requireable<any>;
        loading: PropTypes.Requireable<any>;
        popupSettings: PropTypes.Requireable<any>;
        onOpen: PropTypes.Requireable<any>;
        onClose: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        itemRender: PropTypes.Requireable<any>;
        listNoDataRender: PropTypes.Requireable<any>;
        header: PropTypes.Requireable<any>;
        footer: PropTypes.Requireable<any>;
        delay: PropTypes.Requireable<any>;
        ignoreCase: PropTypes.Requireable<any>;
        iconClassName: PropTypes.Requireable<any>;
        defaultItem: PropTypes.Requireable<any>;
        valueRender: PropTypes.Requireable<any>;
        valueMap: PropTypes.Requireable<any>;
        validationMessage: PropTypes.Requireable<any>;
        required: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        required: boolean;
        popupSettings: {
            animate: boolean;
            height: string;
        };
        validityStyles: boolean;
        delay: number;
        tabIndex: number;
        ignoreCase: boolean;
    };
    /**
     * @hidden
     */
    readonly state: DropDownListState;
    private _element;
    private _typingTimeout;
    protected readonly base: DropDownBase;
    private searchState;
    private _select;
    private _skipFocusEvent;
    private _filterInput;
    private _valueDuringOnChange;
    private _navigated;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * The value of the DropDownList.
     */
    readonly value: any;
    /**
     * The index of the selected item.
     */
    readonly index: number;
    /**
     * Gets the `name` property of the DropDownList.
     */
    readonly name: string | undefined;
    /**
     * Represents the validity state into which the DropDownList is set.
     */
    readonly validity: FormComponentValidity;
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    protected readonly required: boolean;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: DropDownListProps, prevState: DropDownListState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: InternalState) => void;
    /**
     * @hidden
     */
    onNavigate(state: InternalState, keyCode: number): void;
    private renderDropDownWrapper;
    private dummySelect;
    private renderListContainer;
    private renderList;
    private renderListFilter;
    private renderDefaultItem;
    private search;
    private selectNext;
    private handleKeyDown;
    private handleItemClick;
    private handleFocus;
    private handleBlur;
    private handleDefaultItemClick;
    private handleWrapperClick;
    private handleKeyPress;
    private handleListFilterChange;
    private onPopupOpened;
    private onPopupClosed;
    private focusedIndex;
    private focusElement;
    private setValidity;
    private triggerOnChange;
    private applyState;
}
