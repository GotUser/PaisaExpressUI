import * as React from 'react';
import * as PropTypes from 'prop-types';
import { IntlService } from '@progress/kendo-react-intl';
import { TimePickerIncrementalSteps } from './models/IncrementalSteps';
/**
 * @hidden
 */
export declare enum Direction {
    Left = 0,
    Right = 1
}
/**
 * @hidden
 */
export interface TimeSelectorChangeEvent {
    nativeEvent?: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date;
    target: TimeSelector;
}
/**
 * @hidden
 */
export interface TimeSelectorProps {
    cancelButton?: boolean;
    className?: string;
    disabled?: boolean;
    format?: string;
    max?: Date;
    min?: Date;
    nowButton?: boolean;
    onChange?: any;
    onReject?: any;
    steps?: TimePickerIncrementalSteps;
    smoothScroll?: boolean;
    tabIndex?: number;
    value?: Date | null;
}
/**
 * @hidden
 */
export interface TimeSelectorState {
    activeListIndex: number;
    current: Date;
    max: Date;
    min: Date;
    value: Date | null;
}
/**
 * @hidden
 */
export declare class TimeSelector extends React.Component<TimeSelectorProps, TimeSelectorState> {
    static propTypes: {
        cancelButton: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<any>;
        format: (props: TimeSelectorProps, propName: string, componentName: string) => void;
        max: PropTypes.Requireable<any>;
        min: PropTypes.Requireable<any>;
        nowButton: PropTypes.Requireable<any>;
        steps: PropTypes.Requireable<any>;
        smoothScroll: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<any>;
        value: PropTypes.Requireable<any>;
    };
    static defaultProps: {
        value: any;
        disabled: boolean;
        nowButton: boolean;
        cancelButton: boolean;
        format: string;
        min: Date;
        max: Date;
        steps: {};
    };
    readonly state: TimeSelectorState;
    private _element;
    private _nowButton;
    private _cancelButton;
    private _acceptButton;
    private dateFormatParts;
    private valueDuringOnChange?;
    private timeLists;
    private snapTime;
    private mergeValue;
    private nextTickId;
    constructor(props: TimeSelectorProps);
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    readonly value: Date | null;
    protected readonly intl: IntlService;
    private readonly current;
    private readonly min;
    private readonly max;
    private readonly steps;
    /**
     * @hidden
     */
    componentWillReceiveProps(nextProps: TimeSelectorProps): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    focusActiveList: () => void;
    protected nextTick(f: () => any): void;
    protected hasActiveButton(): boolean;
    protected focusList: (dir: Direction) => void;
    protected listReducer: (state: any, list: any, idx: any, all: any) => any;
    protected showNowButton: () => boolean;
    protected hasSteps(): boolean;
    private handleKeyDown;
    private handleAccept;
    private handleReject;
    private handleListBlur;
    private handleListFocus;
    private handleNowClick;
    private handleChange;
}
